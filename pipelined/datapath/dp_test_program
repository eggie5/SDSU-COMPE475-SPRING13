//101011_11100_00111_0000000000001100 //sw $7, 28($3) -- $3=12 -- D[28+12=40] = 7 */
//100011_11100_00111_0000000000001100 //lw $7, 28($3) = $7=D[40]
//000000_11100_11101_00001_00000_100000 // add $30= $28 + $29 =  . 
//000100_00000_00001_0000000000000111 //beq
//000000_00000_00001_00010_00000_100000 //$2=$1+$2=2
//001000_01010_00000_0000000000000001 // $0 = $10 + 1 = 11
//001000_01011_00001_0000000000001010 // $1 = $11 + 10 = 21 (data hazard!)
//001000_00011_01111_0000000000000111 // $15 = $3 + 7 = 10
000000_00000_00000_01000_00000_100000 //add  $8, $0, $0 = $8 = $0 + $0 = 0+ 0 = 0
001000_00000_01001_0000000000000010 //addi $9, $0, 2
001000_00000_00010_1111111111111011 //addi $2, $0, -5
001000_00000_00011_0000000000001001 //addi $3, $0, 9
001000_00000_00111_0000000000000011 //addi $7, $0, 3
100011_00000_00100_0000000000000001 //lw   $4, 1($0)
000100_01000_01001_0000000000000111 //beq $8, $9, done
000000_00011_00010_00011_00000_100100 //and $3,$2,$3  //weird crap is goign on here at the ALU
000000_00111_00010_00111_00000_100000 //add $7, $7, $2 
000000_00100_00010_00100_00000_101010 //slt $4, $4, $2
001000_01000_01000_0000000000000001 //addi $8, $8, 1
000000_00111_00010_00111_00000_100010 //sub  $7, $7, $2 //there's another structiral haz here - prev add $7 instruciton is writing this clock cycle and this sub is reading from $7
//j    for


