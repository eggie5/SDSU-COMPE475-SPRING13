20020005 //addi $2, $0, 5
2003000c //addi $3, $0, 12
2067fff7 //addi $7, $3, -9 = 3
00e22025 //or   $4, $7, $2 $4 = 111 = 7
00642824 //and  $5, $3, $4 = 4
00a42820 //add  $5, $5, $4 =11
10a7000a //beq  $5, $7, end  --- SHOULD SKIP
0064202a //slt  $4, $3, $4  = 0
10800001 //beq  $4, $0, around --- SHOULD TAKE, but it just INS +1 so the 10 is the next instruction
20050000 //addi $5, $0, 0 SHOULDNT HAPPEN HAPPEN HAPPEN
00e2202a //slt $4, $7, $2 = 3 < 2 = 1
00853820 //add  $7, $4, $5 = 1 + 11 = 12
00e23822 //sub  $7, $7, $2 = 12 - 5 = 7
ad87001c //101011_01100_00111_0000000000011100//sw $7, 28($3) -- $3=12 -- D[28+12=40] = 7 //is this instruction right? the C?
8c020028 //100011_11111_00010_0000000000001001 //lw   $2, 40($0) = D[40] = 5
08000011 //000100_00000_00000_0000000000000001 // j end
20020002 //addi $2, $0, 5 // SHOULD BE SKIPPED!
ac020029 //101011_00000_00010_0000000000101001 //sw   $2, 41($0) = D[41]= 7